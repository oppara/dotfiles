; vim: expandtab ts=4 sw=4 sts=4 ff=unix ft=gitconfig
; ln -s /usr/local/share/git-core/contrib/diff-highlight/diff-highlight /usr/local/bin/diff-highlight
[user]
    name = oppara
    email = oppara@oppara.tv

[core]
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    editor = $EDITOR
    pager = $PAGER
    quotepath = false
    autocrlf = false

[color]
    ui = auto

[pager]
    log =  diff-highlight | nkf -w | less -R
    show = diff-highlight | nkf -w | less -R
    diff = diff-highlight | nkf -w | less -R

[alias]
    st = status
    bb = branch
    br = branch -r
    bd = branch -d
    cl = clone
    co = checkout
    ci = commit -v
    ca = commit --amend
    cn = commit --amend --no-edit
    ll = log --graph --decorate --color --date=short --pretty=format:'%C(red)%x09%h %C(yellow)%cn %C(green)%ci  %C(reset)%s%C(blue)%d%Creset'
    me = merge --no-ff
    au = add -u
    fe = fetch
    rs = remote -v show
    df = diff -b
    dc = diff -b --cached
    dns = diff --name-only --stat
    dm = diff -b master --name-only
    dw = diff -b  --word-diff
    dd = diff -b HEAD~
    cp = cherry-pick
    nw = now --stat --update
    ; merge, rebase をもとに戻す
    ab = reset --hard ORIG_HEAD

    empty = commit -q --allow-empty
    ic = commit -q --allow-empty -m 'initial commit'
    wip = commit -q --allow-empty -m 'wip'

    ; リモートで消されたブランチを消す
    fp = fetch --prune

    ; http://davidwalsh.name/get-git-commit-id
    id = rev-parse HEAD

    ;http://d.hatena.ne.jp/thinca/20130925/1380099336
    ignore = update-index --assume-unchanged
    unignore = update-index --no-assume-unchanged
    ignored = !git ls-files -v | grep "^[a-z]"

    ; http://mattn.kaoriya.net/software/git/20140708105946.htm
    pr-setup = config --add remote.origin.fetch +refs/pull/*/head:refs/remotes/origin/pr/*

    gr = grep --no-index --exclude-standard -I --perl-regexp --line-number

    ; Merge CommitをRevert
    rvm = revert -m 1

    deleted = log --diff-filter=D --summary
    restore = "!f () {\
        if [ \"$#\" -eq 0 ];then \
          echo 'usage: git restore <file_name> [file_name_2 [file_name_3 [...]]]';\
          return 1;\
        fi;\
        ret=0;\
        for f in \"$@\";do \
          if [ -a \"$(git rev-parse --show-toplevel)/$f\" ];then \
            printf \"\\e[31m$f exists\\n\\e[m\";\
            ret=2;\
            continue;\
          fi;\
          c=$(git rev-list -n 1 HEAD -- \"$f\");\
          if [ -n \"$c\" ];then \
            git checkout \"$c\"^ -- \"$f\";\
            echo \"$f\" has been restored;\
          else \
            printf \"\\e[31m$f is not in the log\\n\\e[m\";\
            ret=2;\
          fi;\
        done;\
        return $ret;\
    };f"

[rerere]
    enabled = true

[push]
    default = simple

[ghq]
    root = ~/src

[url "git@github.com:oppara"]
    pushInsteadOf = https://github.com/oppara

[init]
    templatedir = ~/.git_template

[diff "xlsx"]
    binary = true
    textconv = $GOPATH/bin/git-xlsx-textconv
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
