snippet php
	<?php
	${1}
	?>
snippet pp
	<?php ${1} ?>
snippet pe
	<?php echo ${1}; ?>

snippet dd
	var_dump( ${1} );${2}
snippet ve
	var_export( ${1} );${2}
snippet pr
	print_r( ${1} );${2}

#snippet ec
#	echo "${1:string}"${2};
#snippet inc
#	include '${1:file}';${2}
snippet in
	include_once '${1:file}';${2}
#snippet req
#	require '${1:file}';${2}
snippet re
	require_once '${1:file}';${2}

# $GLOBALS['...']
snippet globals
	$GLOBALS['${1:variable}']${2: = }${3:something}${4:;}${5}
snippet $_ COOKIE['...']
	$_COOKIE['${1:variable}']${2}
snippet $_ ENV['...']
	$_ENV['${1:variable}']${2}
snippet $_ FILES['...']
	$_FILES['${1:variable}']${2}
snippet $_ Get['...']
	$_GET['${1:variable}']${2}
snippet $_ POST['...']
	$_POST['${1:variable}']${2}
snippet $_ REQUEST['...']
	$_REQUEST['${1:variable}']${2}
snippet $_ SERVER['...']
	$_SERVER['${1:variable}']${2}
snippet $_ SESSION['...']
	$_SESSION['${1:variable}']${2}
# Start Docblock
snippet /*
	/**
	 * ${1}
	 */
# Class - post doc
snippet doc_cp
	/**
	 * ${1:undocumented class}
	 *
	 * @package ${2:default}
	 * @author ${3:`g:snips_author`}
	 */${4}
# Class Variable - post doc
snippet doc_vp
	/**
	 * ${1:undocumented class variable}
	 *
	 * @var ${2:string}
	 */${3}
# Class Variable
snippet doc_v
	/**
	 * ${3:undocumented class variable}
	 *
	 * @var ${4:string}
	 */
	${1:var} $${2};${5}
# Class
snippet doc_c
	/**
	 * ${3:undocumented class}
	 *
	 * @packaged ${4:default}
	 * @author ${5:`g:snips_author`}
	 */
	${1:}class ${2:}
	{${6}
	} // END $1class $2
# Constant Definition - post doc
snippet doc_dp
	/**
	 * ${1:undocumented constant}
	 */${2}
# Constant Definition
snippet doc_d
	/**
	 * ${3:undocumented constant}
	 */
	define(${1}, ${2});${4}
# Function - post doc
snippet doc_fp
	/**
	 * ${1:undocumented function}
	 *
	 * @return ${2:void}
	 * @author ${3:`g:snips_author`}
	 */${4}
# Function signature
snippet doc_s
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 */
	${1}function ${2}(${3});${7}
# Function
snippet doc_f
	/**
	 * ${4:undocumented function}
	 *
	 * @return ${5:void}
	 * @author ${6:`g:snips_author`}
	 */
	${1}function ${2}(${3})
	{${7}
	}
# Header
snippet doc_h
	/**
	 * ${1}
	 *
	 * @author ${2:`g:snips_author`}
	 * @version ${3:$Id$}
	 * @copyright ${4:$2}, `strftime('%d %B, %Y')`
	 * @package ${5:default}
	 */
	
	/**
	 * Define DocBlock
	 *//
# Interface
snippet doc_i
	/**
	 * ${2:undocumented class}
	 *
	 * @package ${3:default}
	 * @author ${4:`g:snips_author`}
	 */
	interface ${1:}
	{${5}
	} // END interface $1
# class ...
snippet cl
	class ${1:ClassName} {
		${2}
	}
# define(...)
snippet def
	define( '${1}'${2} );${3}
# defined(...)
snippet def?
	${1}defined( '${2}' )${3}
snippet wh
	while ( ${1:/* condition */} ) {
		${2:// code...}
	}
# do ... while
snippet do
	do {
		${2:// code... }
	} while ( ${1:/* condition */} );
snippet if
	if ( ${1:/* condition */} ) {
		${2:// code...}
	}
snippet ife
	if ( ${1:/* condition */} ) {
		${2:// code...}
	} 
	else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elif
	elseif ( ${1:/* condition */} ) {
		${2:// code...}
	}
# Tertiary conditional
snippet ?: 
	$${1:retVal} = ( ${2:condition} ) ? ${3:a} : ${4:b};${5}
snippet sw
	switch ( $${1:variable} ) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet ca
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet fo
	for ( $${2:i} = 0; $$2 < ${1:count}; $$2${3:++} ) {
		${4: // code...}
	}
snippet fe
	foreach ( $${1:variable} as $${2:key} ) {
		${3:// code...}
	}
snippet fun
	${1:public }function ${2:FunctionName}(${3}) {
		${4:// code...}
	}
snippet fn
	function ${1:FunctionName}(${2}) {
		${3}
	}
snippet test
	function test${1:FunctionName}() {
		${2}
	}
# $... = array (...)
#snippet array
#	$${1:arrayName} = array('${2}' => ${3});${4}

# cakephp
snippet cc
	class ${1:ClassName}Controller extends AppController {
		var $name = '$1';
		var $helpers = array();
		var $components = array();
		${2}
	}
snippet cm
	class ${1:ClassName} extends AppModel {
		var $name = '$1';
		${2}
	}
snippet _
	__( ${1}, true )${2}
snippet __
	__( ${1} )${2}
snippet ld
	$this->log( ${1}, LOG_DEBUG );${2}
snippet le
	$this->log( ${1}, LOG_ERROR );${2}
snippet de #2
	debug( ${1} );${2}

# simpletest
snippet ae
	$this->assertEqual( ${1:$results}, ${2:$expected} );${3}
snippet ane
	$this->assertNotEqual( ${1:$results}, ${2:$expected} );${3}
snippet at
	$this->assertTrue( ${1} );${2}
snippet af
	$this->assertFalse( ${1} );${2}
snippet an
	$this->assertNull( ${1} );${2}
snippet ann
	$this->assertNotNull( ${1} );${2}
snippet ap
	$this->assertPattern( ${1}, ${2} );${3}
snippet anp
	$this->assertNotPattern( ${1}, ${2} );${3}
snippet ar
	$this->assertReference( ${1}, ${2} );${3}
snippet ac
	$this->assertClone( ${1}, ${2} );${3}
snippet ai
	$this->assertIdentical( ${1:$results}, ${2:$expected} );${3}
snippet ani
	$this->assertNotIdentical( ${1:$results}, ${2:$expected} );${3}
snippet aia
	$this->assertIsA( ${1}, ${2} );${3}
snippet ana
	$this->assertNotA( ${1}, ${2} );${3}
snippet awm
	$this->assertWithinMargin( ${1}, ${2}, ${3} );${4}
snippet aom
	$this->assertOutsideMargin( ${1}, ${2}, ${3} );${4}
snippet ee
	$this->expectError( ${1} );${2}
snippet as
	$this->assert( ${1} );${2}
snippet atag
	$this->assertTags( ${1}, ${2} );${3}
snippet simple
	if ( !defined( '__TEST' ) ) {
		define( '__TEST', __FILE__ );
	}
	require_once( 'simpletest/unit_tester.php' );
	require_once( 'simpletest/shell_tester.php' );
	require_once( 'simpletest/reporter.php' );
	require_once( dirname( __FILE__ ) . '/' );

	class ${1:ClassName}Test extends UnitTestCase {

		function $1Test() {
			$this->UnitTestCase( '$1Test' ); 
		}

		function setUp() {
		}

		function tearDown() {
		}

		function testSomething() {
			$this->fail();
		}
	}

	if ( __TEST == __FILE__ ) {
		$test =& new $1Test();
		if ( SimpleReporter::inCli() ) {
			exit( $this->run( new TextReporter() ) ? 0 : 1 ); 
		}
		$this->run( new HtmlReporter( 'utf-8' );
	}
